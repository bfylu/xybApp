package cn.payadd.majia.activity;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.fdsj.credittreasure.R;
import com.github.gcacace.signaturepad.views.SignaturePad;
import com.utils.Utilities;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import cn.payadd.majia.config.AppConfig;
import cn.payadd.majia.config.StoreDirConfig;
import cn.payadd.majia.task.FileUpdateTask;
import cn.payadd.majia.util.FileFormat;
import cn.payadd.majia.util.ImageUtil;

/**
 * Created by df on 2017/8/3.
 */

public class InstallmentSignAreaActivity extends BaseActivity implements View.OnClickListener {

    private static final String TAG = InstallmentSignAreaActivity.class.getName();

    private SignaturePad signArea;

    private TextView tvClearSign;

    private Button btnCancel;

    private Button btnSign;

    private TextView tvSignArea;

    private String mOrderNo;

    public static final int HANDLER_UPLOAD_FINISH = 1;

    public static final String TAG_SIGN_IMAGE = "signImage";

    private List<FileUpdateTask> taskQueue;

    private Map<String, String> tagUrlMap;

    private ProgressDialog pDialog;

    private String mFilePath;

    private String sourceFilePath;

    {
        tagUrlMap = new HashMap<>();
        tagUrlMap.put(TAG_SIGN_IMAGE, AppConfig.getInstallmentSignImageInterface());
        taskQueue = new ArrayList<>();
    }


    @Override
    int getLayoutId() {
        return R.layout.activity_sign_area;
    }

    @Override
    void initView() {
        setTitleCenterText("个人消费分期合同");
        setTitleBackButton();

        signArea = (SignaturePad) findViewById(R.id.signature_pad);
        tvClearSign = (TextView) findViewById(R.id.tv_clear_sign);
        tvSignArea = (TextView) findViewById(R.id.tv_sign_area);
        btnCancel = (Button) findViewById(R.id.btn_cancel);
        btnSign = (Button) findViewById(R.id.btn_sign);
        signArea.setOnSignedListener(new SignaturePad.OnSignedListener() {
            @Override
            public void onStartSigning() {
                tvSignArea.setVisibility(View.GONE);
            }

            @Override
            public void onSigned() {
                btnSign.setEnabled(true);
            }

            @Override
            public void onClear() {
                btnSign.setEnabled(false);
            }
        });
        btnSign.setOnClickListener(this);
        tvClearSign.setOnClickListener(this);
        btnCancel.setOnClickListener(this);


    }

    @Override
    void initData() {
        mOrderNo = getIntent().getStringExtra("orderNo");

    }

    @Override
    void initPermission() {

    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_sign:
                pDialog = ProgressDialog.show(this, null, "请稍等...", true, false, new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel(DialogInterface dialog) {

                    }
                });
                pDialog.setCanceledOnTouchOutside(false);
                pDialog.setCancelable(true);
                Bitmap signatureBitmap = signArea.getSignatureBitmap();
                File file = ImageUtil.compressImage(signatureBitmap);
                String name = file.getName();
                sourceFilePath = file.getAbsolutePath();
                File f = null;
                if (FileFormat.isImage(name)) {
                    int indexOf = name.lastIndexOf(".");
                    String newName = name.substring(0, indexOf) + "_c" + name.substring(indexOf);
                    File newFile = new File(StoreDirConfig.getTempForUploadDir(), newName);
                    ImageUtil.zoomAndCompress(file, newFile);
                    f = newFile;
                } else {
                    f = file;
                }
                mFilePath = f.getAbsolutePath();
                Map<String, Object> params = new HashMap<>();
                params.put("orderNo", mOrderNo);
                params.put("file", f);
                params.put("sessionToken", Utilities.getSessionToKen(this));
                FileUpdateTask task = new FileUpdateTask(this, null, handlerUI);
                task.setParamsMap(params);
                task.setActionUrl(tagUrlMap.get(TAG_SIGN_IMAGE));
                taskQueue.add(task);
                startUpload();
                break;
            case R.id.btn_cancel:
                finish();
                break;
            case R.id.tv_clear_sign:
                signArea.clear();
                break;
        }
    }

    private Handler handlerUI = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (pDialog != null) {
                pDialog.hide();
            }
            switch (msg.what) {
                case HANDLER_UPLOAD_FINISH: {
                    try {
                        Map<String, Object> map = (Map<String, Object>) msg.obj;
                        String status = (String) map.get("uploadStatus");
                        FileUpdateTask task = (FileUpdateTask) map.get("taskObject");
                        if ("success".equals(status)) {
                            Toast.makeText(InstallmentSignAreaActivity.this, "签约提交成功", Toast.LENGTH_SHORT).show();
                            //删除本地图片
                            Intent intent = new Intent(InstallmentSignAreaActivity.this, InstallmentDetailActivity.class);
                            intent.putExtra(InstallmentDetailActivity.KEY_ORDER_NO, mOrderNo);
                            startActivity(intent);
                            finish();
                        } else {
                            Toast.makeText(InstallmentSignAreaActivity.this, "签名失败，请稍后再试", Toast.LENGTH_SHORT).show();
                        }
                        if (!taskQueue.isEmpty()) {
                            startUpload();
                        }
                    }finally {
                        File file = new File(mFilePath);
                        File sourceFile = new File(sourceFilePath);
                        file.delete();
                        sourceFile.delete();
                    }
                    break;
                }
            }
        }
    };

    public void startUpload() {
        if (null != taskQueue && !taskQueue.isEmpty()) {
            FileUpdateTask task = taskQueue.remove(0);
            task.execute(new String[]{});
        }
    }




}
