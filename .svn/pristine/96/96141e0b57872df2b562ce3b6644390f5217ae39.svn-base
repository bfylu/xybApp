package cn.payadd.majia.activity;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.fdsj.credittreasure.R;
import com.fdsj.credittreasure.broadcast.PayPushBroadcastReceiver;
import com.uuzuche.lib_zxing.activity.CodeUtils;
import com.uuzuche.lib_zxing.camera.CameraManager;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import java.util.Map;

import cn.payadd.majia.config.EnvironmentConfig;
import cn.payadd.majia.constant.PayMethod;
import cn.payadd.majia.constant.PayType;
import cn.payadd.majia.device.pos.IPosHelper;
import cn.payadd.majia.device.pos.PosDeviceUtil;
import cn.payadd.majia.device.pos.PosScanListener;
import cn.payadd.majia.face.IActivity;
import cn.payadd.majia.face.ICallback;
import cn.payadd.majia.listener.NoDoubleClickListener;
import cn.payadd.majia.presenter.AcquirePresenter;
import cn.payadd.majia.presenter.ReadIdcardPresenter;
import cn.payadd.majia.util.AppLog;
import cn.payadd.majia.util.DensityUtil;
import cn.payadd.majia.view.ViewfinderView;
import cn.payadd.majia.view.ZXingScanQrcode;

/**
 * Created by zhengzhen.wang on 2017/6/7.
 */

public class AcquireActivity extends BaseActivity implements IActivity, View.OnClickListener {

    private static final String LOG_TAG = "AcquireActivity";

    private static final int PAY_METHOD_SCAN = 1;

    private static final int PAY_METHOD_QRCODE = 2;

    private static final int PAY_TYPE_WEIXIN_PAY = 1;

    private static final int PAY_TYPE_ALIPAY = 2;

    private static final int PAY_TYPE_UNIONPAY = 3;

    private static final int PAY_TYPE_INSTALLMENT_PAY = 4;

    private static final int UNIONPAY_REQ_CODE = 1;

    private TextView tvAcquireAmt;

    private ImageView ivCenter;

    private TextView tvWeixin, tvAlipay, tvUnionpay, tvInstallment;

    private TextView tvScan, tvQrcode;

    private AcquirePresenter acquirePresenter;

    private String tradeAmt, payMethod, payType, authCode;

    private TextView tvPayType;

    private RelativeLayout rlQrcode;

    private PayPushBroadcastReceiver receiver;

    private String currentOrderNo;

    private SurfaceView surfaceView;

    private ViewfinderView viewfinderView;

    private ZXingScanQrcode zXingScanQrcode;

    private Map<String, String> installmentTypeMap;

    private String installmentType;

    private TextView tvAcquireTip;

    private AlertDialog dialog;
    private ProgressDialog pDialog;
    private ReadIdcardPresenter readIdcardPresenter;

    private int currentPayType = PAY_TYPE_WEIXIN_PAY;

    {
        installmentTypeMap = new LinkedHashMap<>();
        installmentTypeMap.put("个人分期", "1");
        installmentTypeMap.put("企业(团体)", "2");
    }

    @Override
    int getLayoutId() {
        return R.layout.activity_acquire;
    }

    @Override
    void initView() {

        setTitleCenterText("收款");
        setTitleBackButton();
        if(EnvironmentConfig.isPos() && PosDeviceUtil.NEWLAND_POS_NAME.equals(EnvironmentConfig.getPosType())){
//            setTitleRightImage(R.mipmap.icon_help, new View.OnClickListener() {
//                @Override
//                public void onClick(View v) {
//                    showLoading();
//                    zXingScanQrcode.close();
//    //                Intent intent = new Intent(AcquireActivity.this,PosScanActivity.class);
//    //                startActivity(intent);
//                    if(EnvironmentConfig.isPos()){
//                        if(PosDeviceUtil.NEWLAND_POS_NAME.equals(EnvironmentConfig.getPosType())) {
//                            IPosHelper helper = PosDeviceUtil.getPosHelper(EnvironmentConfig.getPosType(),AcquireActivity.this);
//                            helper.scanQrcode(null, new PosScanListener() {
//                                @Override
//                                public void onScanResult(String[] arg0) {
//                                    Log.w("scan","onScanResult-----"+arg0[0]);
//                                    selectPayMethod(PAY_METHOD_SCAN);
//                                    authCode = arg0[0];
//                                    nowPay();
//    //                                Toast.makeText(AcquireActivity.this,arg0[0],Toast.LENGTH_SHORT).show();
//                                }
//
//                                @Override
//                                public void onFinish() {
//                                    if(pDialog != null){
//                                        pDialog.hide();
//                                    }
//                                    Intent intent = new Intent(AcquireActivity.this, AcquireActivity.class);
//                                    intent.putExtra("amount", tradeAmt);
//                                    intent.putExtra("goodsList", getIntent().getStringExtra("goodsList"));
//                                    AcquireActivity.this.startActivity(intent); //收款界面
//                                }
//
//                                @Override
//                                public void onFail(final int errorCode, final String errorDesc) {
//                                    runOnUiThread(new Runnable() {
//                                        @Override
//                                        public void run() {
//                                            Toast.makeText(AcquireActivity.this,errorCode+","+errorDesc,Toast.LENGTH_SHORT).show();
//                                        }
//                                    });
//
//                                }
//                            });
//                            finish();
//
//                        }else{
//                            Toast.makeText(AcquireActivity.this,"该机型暂时未开通前置扫码",Toast.LENGTH_SHORT).show();
//                        }
//                    }
//                }
//            });
        }
//      setTitleRightText("支付状态");

        tvAcquireAmt = (TextView) findViewById(R.id.tv_acquire_amt);
        DecimalFormat df = new DecimalFormat("#################0.00");
        tradeAmt = df.format(new BigDecimal(getIntent().getStringExtra("amount")));
        tvAcquireAmt.setText(tradeAmt);

        rlQrcode = (RelativeLayout) findViewById(R.id.rl_qrcode);

        tvAcquireTip = (TextView) findViewById(R.id.tv_acquire_tip);

        tvScan = (TextView) findViewById(R.id.tv_scan);
        tvScan.setOnClickListener(this);
        tvQrcode = (TextView) findViewById(R.id.tv_qrcode);
        tvQrcode.setOnClickListener(this);

        ivCenter = (ImageView) findViewById(R.id.img_center);
        ivCenter.setOnClickListener(this);
        tvWeixin = (TextView) findViewById(R.id.btn_weixinpay);
        tvWeixin.setOnClickListener(this);
        tvAlipay = (TextView) findViewById(R.id.btn_alipay);
        tvAlipay.setOnClickListener(this);
        tvUnionpay = (TextView) findViewById(R.id.btn_unionpay);
        tvUnionpay.setOnClickListener(this);
        tvInstallment = (TextView) findViewById(R.id.btn_installment_pay);
        tvInstallment.setOnClickListener(new NoDoubleClickListener() {
            @Override
            protected void onNoDoubleClick(View v) {
//                showLoading();
                selectPayType(PAY_TYPE_INSTALLMENT_PAY);
            }
        });


        viewfinderView = (ViewfinderView) findViewById(R.id.viewfinder_view);
        surfaceView = (SurfaceView) findViewById(R.id.preview_view);

        AlertDialog.Builder builder = new android.app.AlertDialog.Builder(AcquireActivity.this);
        LayoutInflater inflater = getLayoutInflater();
        final View layout = inflater.inflate(R.layout.dialog_error, null);//获取自定义布局
        builder.setView(layout);
        final TextView tvPhone = (TextView) layout.findViewById(R.id.tv_phone);
        ImageView iv = (ImageView) layout.findViewById(R.id.iv_close);
        Button btn = (Button) layout.findViewById(R.id.btn_dialog_dismiss);
        dialog = builder.create();
        iv.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        tvPhone.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //调起phone
                try{
                    Intent intent =  new Intent(Intent.ACTION_DIAL);
                    intent.setData(Uri.parse("tel:"+tvPhone.getText().toString()));
                    if (intent.resolveActivity(getPackageManager()) != null) {
                        startActivity(intent);
                    }
                }catch (ActivityNotFoundException e){
                    e.printStackTrace();
                }

            }
        });
        dialog.setCanceledOnTouchOutside(false);
    }

    @Override
    void initData() {

        acquirePresenter = new AcquirePresenter(this);
        readIdcardPresenter = new ReadIdcardPresenter(this);




        IntentFilter filter = new IntentFilter();
        filter.addAction(PayPushBroadcastReceiver.PAY_RESULT_PUSH_BROADCAST_NAME);
        receiver = new PayPushBroadcastReceiver(new PayPushBroadcastReceiver.Callback() {

            @Override
            public void exec(Bundle data) {
                if(pDialog!=null){
                    pDialog.hide();
                }
                final String orderStatus = data.getString("orderStatus");
                final String orderNo = data.getString("orderNo");
                if (!orderNo.equals(currentOrderNo)) {
                    return;
                }

                if (!"pay_succ".equals(orderStatus)) {
                    return;
                }
                zXingScanQrcode.close();
                Intent intent = new Intent(AcquireActivity.this,AcquireSuccessActivity.class);
                intent.putExtras(data);
                startActivity(intent);
                finish();

            }
        });
        registerReceiver(receiver, filter);

    }

    @Override
    void initPermission() {

    }

    public void showLoading(){
        if (pDialog != null) {
            pDialog.show();
        } else {
            pDialog = ProgressDialog.show(AcquireActivity.this, null, "正在收款...", true, false, new DialogInterface.OnCancelListener() {
                @Override
                public void onCancel(DialogInterface dialog) {

                }
            });
            pDialog.setCanceledOnTouchOutside(false);
            pDialog.setCancelable(true);
            pDialog.show();
        }
    }


    /**
     * 支付方式，主扫/被扫
     * @param payMethod
     */
    private void selectPayMethod(int payMethod) {

        if (PAY_METHOD_SCAN == payMethod) {
            if (tvScan.isSelected()) {
                return;
            }
            rlQrcode.setBackgroundDrawable(null);
            ivCenter.setVisibility(View.GONE);
            tvQrcode.setSelected(false);
            tvScan.setSelected(true);
            tvQrcode.setTextColor(getResources().getColor(R.color.aquire_pay_method));
            tvScan.setTextColor(getResources().getColor(R.color.acquire_text_selected));
            this.payMethod = PayMethod.SCAN;
            tvAcquireTip.setText("请扫描顾客付款码");
            selectPayType(currentPayType);


        } else if (PAY_METHOD_QRCODE == payMethod) {
            if (tvQrcode.isSelected()) {
                return;
            }
            ivCenter.setVisibility(View.VISIBLE);
            rlQrcode.setBackgroundDrawable(getResources().getDrawable(R.mipmap.shoukan));
            tvScan.setSelected(false);
            tvQrcode.setSelected(true);
            tvScan.setTextColor(getResources().getColor(R.color.aquire_pay_method));
            tvQrcode.setTextColor(getResources().getColor(R.color.white));
            this.payMethod = PayMethod.QRCODE;
            tvAcquireTip.setText("请顾客扫描二维码");
            selectPayType(currentPayType);
        }

    }

    private void selectPayType(int payType) {
        zXingScanQrcode.resetQrcode();
        if (null != tvPayType && PAY_TYPE_INSTALLMENT_PAY != payType) {
            tvPayType.setSelected(false);
        }

        if (PAY_TYPE_WEIXIN_PAY == payType) {
            tvPayType = tvWeixin;
            this.payType = PayType.WEIXINPAY;
            this.currentPayType = payType;

        } else if (PAY_TYPE_ALIPAY == payType) {
            tvPayType = tvAlipay;
            this.payType = PayType.ALIPAY;
            this.currentPayType = payType;

        } else if (PAY_TYPE_UNIONPAY == payType) {
            tvPayType = tvUnionpay;
            this.payMethod = PayMethod.CARD;
            this.payType = PayType.UNIONPAY;

        } else if (PAY_TYPE_INSTALLMENT_PAY == payType) {
            tvPayType = tvInstallment;
            this.payType = PayType.INSTALLMENT;
            final String[] choiceItems = installmentTypeMap.keySet().toArray(new String[]{});
            if (TextUtils.isEmpty(installmentType)) {
                installmentType = installmentTypeMap.get(choiceItems[0]);
            }
            readIdcardPresenter.applyInstallment("",tradeAmt);
//            Intent intent =  new Intent(this,InstallmentPayActivity.class);
//            intent.putExtra(InstallmentPayActivity.KEY_ORDER_AMOUNT,tradeAmt);
//            intent.putExtra(InstallmentPayActivity.KEY_SOURCE,"app");
//            intent.putExtra("goodsList",getIntent().getStringExtra("goodsList"));
//            startActivity(intent);

            return;
        }
        if (null != tvPayType && PAY_TYPE_INSTALLMENT_PAY != payType) {
            tvPayType.setSelected(true);
        }
        if (PayMethod.CARD.equals(payMethod) || PayMethod.QRCODE.equals(payMethod)) {
            nowPay();
        }

    }

    private void nowPay() {
       if(PayMethod.SCAN.equals(payMethod)){
           showLoading();
       }
        if (PayMethod.QRCODE.equals(payMethod)
                || PayMethod.SCAN.equals(payMethod)
                || PayMethod.CARD.equals(payMethod)) {

            ICallback failCallback = new ICallback() {
                @Override
                public void exec(Object params) {
                    Map<String,String> respMap = (Map<String, String>) params;
                    if(respMap!=null){
                        if("000017".equals(respMap.get("respCode"))){
                            //弹出窗口
                            dialog.show();
                        }else{
                            if(pDialog != null){
                                pDialog.hide();
                            }
                            String respDesc = respMap.get("respDesc");
                            if(!TextUtils.isEmpty(respDesc)) {
                                Toast.makeText(AcquireActivity.this,respDesc, Toast.LENGTH_SHORT).show();
                            }
                        }
                    }
                    if (PayMethod.SCAN.equals(payMethod)) {
                        zXingScanQrcode.getHandler().sendEmptyMessage(ZXingScanQrcode.RE_PREVIEW);
                    }
                }
            };
            String goodsList = getIntent().getStringExtra("goodsList");
            if(!TextUtils.isEmpty(goodsList)){
                acquirePresenter.pay(tradeAmt, payMethod,payType, authCode,goodsList,failCallback);
            }else{
                acquirePresenter.pay(tradeAmt, payMethod, payType, authCode, failCallback);
            }

        } else {
            if (PayMethod.SCAN.equals(payMethod)) {
                zXingScanQrcode.getHandler().sendEmptyMessage(ZXingScanQrcode.RE_PREVIEW);
            }
        }

    }

    @Override
    public void updateModel(String key, Object data) {

        if (PayMethod.SCAN.equals(payMethod)) {
                zXingScanQrcode.getHandler().sendEmptyMessage(ZXingScanQrcode.RE_PREVIEW);
        }
        if ("applyInstallment".equals(key)) {
            Map<String, String> map = (Map<String, String>) data;
            String installmentUrl = map.get("installmentUrl");
            String installmentAmt = map.get("installmentAmt");
            String orderAmount = map.get("orderAmount");
            String downPayment = map.get("downPayment");
            zXingScanQrcode.close();
            Intent intent = new Intent(this, InstallmentPayActivity.class);
            intent.putExtra(InstallmentPayActivity.KEY_DOWN_PAYMENT, downPayment);
            intent.putExtra(InstallmentPayActivity.KEY_INSTALLMENT_AMOUNT, installmentAmt);
            intent.putExtra(InstallmentPayActivity.KEY_INSTALLMENT_URL, installmentUrl);
            intent.putExtra(InstallmentPayActivity.KEY_ORDER_AMOUNT, orderAmount);
            startActivity(intent);
            finish();

        }else if("pay".equals(key)) {
            Map<String, String> map = (Map<String, String>) data;
            currentOrderNo = map.get("orderNo");
            if (PayMethod.QRCODE.equals(payMethod)) {

                String payUrl = map.get("payUrl");
                AppLog.d(LOG_TAG, "payUrl -> " + payUrl);
                int size = DensityUtil.dip2px(this, 200);
                int logo = R.mipmap.logo;
                if (PayType.WEIXINPAY.equals(payType)) {
                    logo = R.mipmap.logo_weixin_pay;
                } else if (PayType.ALIPAY.equals(payType)) {
                    logo = R.mipmap.logo_alipay;
                }
                Bitmap qrcodeImg = CodeUtils.createImage(payUrl, size, size, BitmapFactory.decodeResource(getResources(), logo));
                ivCenter.setImageBitmap(qrcodeImg);

            } else if (PayMethod.SCAN.equals(payMethod)) {


            } else if (PayMethod.CARD.equals(payMethod)) {
                IPosHelper helper = PosDeviceUtil.getPosHelper(EnvironmentConfig.getPosType(),this);
                helper.payForCard(new BigDecimal(tradeAmt),currentOrderNo,this);
            }
        }
    }

    @Override
    public void onClick(View v) {

        switch (v.getId()) {

            case R.id.tv_scan: {
                zXingScanQrcode.init();
                selectPayMethod(PAY_METHOD_SCAN);
                break;
            }

            case R.id.tv_qrcode: {
                selectPayMethod(PAY_METHOD_QRCODE);
                break;
            }

            case R.id.btn_weixinpay: {
                if(tvQrcode.isSelected()){
                    payMethod = PayMethod.QRCODE;
                }else if(tvScan.isSelected()){
                    payMethod = PayMethod.SCAN;
                }else {
                    payMethod = null;
                }
                selectPayType(PAY_TYPE_WEIXIN_PAY);
                break;
            }

            case R.id.btn_alipay: {
                if(tvQrcode.isSelected()){
                    payMethod = PayMethod.QRCODE;
                }else if(tvScan.isSelected()){
                    payMethod = PayMethod.SCAN;
                }else {
                    payMethod = null;
                }
                selectPayType(PAY_TYPE_ALIPAY);
                break;
            }

            case R.id.btn_unionpay: {
                if (!EnvironmentConfig.isPos()) {
                    Toast.makeText(this, "银联刷卡功能只能在POS机上使用", Toast.LENGTH_SHORT).show();
                    return;
                }
                selectPayType(PAY_TYPE_UNIONPAY);
                break;
            }

            case R.id.btn_installment_pay: {
                selectPayType(PAY_TYPE_INSTALLMENT_PAY);
                break;
            }

            case R.id.img_center: {
                nowPay();
                break;
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        switch (requestCode) {
            case UNIONPAY_REQ_CODE: {
                // 银行卡支付
                switch(resultCode) {
                    case Activity.RESULT_CANCELED:
                        String reason = data.getStringExtra("reason");
                        if(reason != null) {
                            Toast.makeText(this, reason, Toast.LENGTH_LONG).show();
                        }
                        break;
                    case Activity.RESULT_OK:
                        Toast.makeText(this, "交易成功", Toast.LENGTH_LONG).show();
                        finish();
                        break;
                }
                break;
            }
        }
    }

    @Override
    public void finish() {
        super.finish();
        try {
            zXingScanQrcode.close();
            if(EnvironmentConfig.isPos()){
                IPosHelper helper = PosDeviceUtil.getPosHelper(EnvironmentConfig.getPosType(),this);
                helper.close(this);
            }
            if (null != receiver) {
                unregisterReceiver(receiver);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        AppLog.d(LOG_TAG, "onResume");
        CameraManager.init(this);
        if(EnvironmentConfig.isPos()){
            IPosHelper helper = PosDeviceUtil.getPosHelper(EnvironmentConfig.getPosType(),this);
            helper.init(this);
        }
        
        zXingScanQrcode = new ZXingScanQrcode(this, surfaceView, viewfinderView, false, new ICallback() {
            @Override
            public void exec(Object params) {
                authCode = (String) params;
                nowPay();
            }
        },0);
        selectPayMethod(PAY_METHOD_SCAN);
        if (null != zXingScanQrcode && PayMethod.SCAN.equals(payMethod)) {
            zXingScanQrcode.init();
        }

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(pDialog!=null){
            pDialog.dismiss();
        }
    }
}
