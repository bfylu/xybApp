package cn.payadd.majia.presenter;

import android.content.Context;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

import com.utils.Utilities;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

import cn.payadd.majia.config.EnvironmentConfig;
import cn.payadd.majia.exception.BusinessRuntimeException;
import cn.payadd.majia.face.ICallback;
import cn.payadd.majia.security.AppSecurity;
import cn.payadd.majia.task.RequestServerTask;
import cn.payadd.majia.util.StringUtil;

/**
 * Created by zhengzhen.wang on 2017/6/12.
 */

public abstract class BasePresenter {

    protected Context ctx;

    private boolean pending;

    public BasePresenter(Context ctx) {

        this.ctx = ctx;
    }

    protected void sendToServer(String service, Map<String, String> data, ICallback callback) {

        sendToServer(service, data, true, callback, null, null);
    }

    protected void sendToServer(String service, Map<String, String> data, ICallback callback, ICallback failCallback) {

        sendToServer(service, data, true, callback, failCallback, null);
    }

    protected void sendToServer(String service, Map<String, String> data, ICallback callback, ICallback failCallback, ICallback excpCallback) {

        sendToServer(service, data, true, callback, failCallback, excpCallback);
    }

    protected void sendToServer(String service, Map<String, String> data, boolean encrypt, final ICallback succCallbak, final ICallback failCallback, final ICallback excpCallback) {

        if (pending) {
            return;
        }
        pending = true;
        try {
            Map<String, String> reqData = new HashMap<>();
            reqData.put("version", "1.0.0");
            reqData.put("charset", "UTF-8");
            reqData.put("platform", "android");
            reqData.put("service", service);
            reqData.put("signMethod", "MD5");
            reqData.put("signature", "");
            reqData.put("sessionToken", Utilities.getSessionToKen(ctx));
            // （h5专用，非h5去掉该字段）
//            reqData.put("loginToken", "");
            reqData.put("terminalType", EnvironmentConfig.getTerminalType());
            if (encrypt) {
                reqData.put("body", AppSecurity.encryptAndSign(data));
            } else {
//                JSONObject jsonObj = new JSONObject(data);
//                String plaintext = jsonObj.toString();
                reqData.put("body", StringUtil.linkAndEncode(data));
            }
            Log.e("reqData:",reqData.toString());
            String content = StringUtil.linkAndEncode(reqData);
            Log.e("send:",content);
            RequestServerTask task = new RequestServerTask(new ICallback() {
                @Override
                public void exec(Object params) {

                    String msg = (String) params;

                    if (TextUtils.isEmpty(msg)) {
                        if (null != excpCallback) {
                            excpCallback.exec(null);
                        } else {
                            Toast.makeText(ctx, "返回报文为空", Toast.LENGTH_LONG).show();
                        }

                        return;
                    }

                    String respMsg = AppSecurity.decryptAndVerify(msg);
                    Map<String, String> map = StringUtil.separateAndURLDecode(respMsg);
                    String respCode = map.get("respCode");
                    String respDesc = map.get("respDesc");

                    if (!"000000".equals(respCode)) {
                        if (null != failCallback) {
                            failCallback.exec(map);
                        } else {
                            Toast.makeText(ctx, respDesc, Toast.LENGTH_LONG).show();
                        }
                    }else {
                        if (null != succCallbak) {
                            succCallbak.exec(map);
                        }
                    }

                }
            });
            task.execute(content);

        } catch (BusinessRuntimeException e) {
            e.printStackTrace();
            Toast.makeText(ctx, e.getErrCode() + "：" + e.getErrMsg(), Toast.LENGTH_LONG).show();

        } finally {
            pending = false;
        }
    }
    protected void sendJsonToServer(String service, JSONObject data, boolean encrypt, final ICallback succCallbak, final ICallback failCallback, final ICallback excpCallback) {

    }

}
