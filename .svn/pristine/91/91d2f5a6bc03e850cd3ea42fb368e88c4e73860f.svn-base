package com.fdsj.credittreasure.activities;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.WindowManager;
import android.widget.RelativeLayout;

import com.fdsj.credittreasure.Interface.iActivities.ILogin;
import com.fdsj.credittreasure.R;
import com.utils.LogUtil;
import com.utils.ToastUtils;
import com.utils.Utilities;

import java.util.Map;

import butterknife.BindView;
import cn.payadd.majia.activity.LoginActivity;
import cn.payadd.majia.presenter.LoginPresenter;


/**
 * Created by BXND on 2016-08-18.
 */
public class StartActivity extends BaseActivity implements ILogin {

    private static final String LOG_TAG = "StartActivity";

    private final int PERMISSION = 1;

    @BindView(R.id.line)
    RelativeLayout relativeLayout;

    LoginPresenter presenter;

    //VersionUpdatePresenter updatePresenter;

    private boolean animationThread = false;
    private ProgressDialog pDialog;

    @Override
    protected int getLayoutView() {
        return R.layout.activity_start;
    }

    @Override
    protected void initView() {
        //Log.i("开始解压时间---", System.currentTimeMillis()+"");
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        presenter = new LoginPresenter(this);
        //updatePresenter = new VersionUpdatePresenter(this);
        Resources resources = this.getResources();
        LogUtil.info("现在读取的x100是", resources.getDimension(R.dimen.x100) + "屏幕宽度：" + Utilities.getScreenWidth(this));
        LogUtil.info("现在读取的y100是", resources.getDimension(R.dimen.y100) + "屏幕高度：" + Utilities.getScreenHeight(this));



        //解压资源包

            //Log.i("结束解压时间---", System.currentTimeMillis()+"");
            /*if (pDialog == null) {
                pDialog = ProgressDialog.show(this, null, "正在检查更新...", true, false, new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel(DialogInterface dialog) {

                    }
                });
                pDialog.setCanceledOnTouchOutside(false);
                pDialog.setCancelable(true);
            }
            pDialog.show();
            String userName = Utilities.getUsernameForLogin(this);
            updatePresenter.updateApp(userName);*/


        /*if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_PHONE_STATE, Manifest.permission.CAMERA}, PERMISSION);
        } else {
            userLogin();
        }*/
        //NewLogin(true);

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED
                || ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED
                || ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this
                    , new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE
                    , Manifest.permission.READ_PHONE_STATE
                    , Manifest.permission.CAMERA}, PERMISSION);
        } else {
            //Log.e("开始",System.currentTimeMillis()+"");
            userLogin();
        }

    }

    @Override
    protected void initData() {

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        userLogin();
    }

    /**
     * 调用登录线程
     */
    public void userLogin() {
        String loginToken = Utilities.getLoginToken(this);
        String userName = Utilities.getUsernameForLogin(StartActivity.this);
        if (!TextUtils.isEmpty(loginToken) && !TextUtils.isEmpty(userName)) {
            presenter.userLogin(loginToken, userName, "", StartActivity.this, false);//登录请求
        } else {
            userLoginError("",null);
        }
    }


    public void myStartActivity() {

//        AnimationSet animationSet = new AnimationSet(true);
//        //参数1～2：x轴的开始位置
//        //参数3～4：y轴的开始位置
//        //参数5～6：x轴的结束位置
//        //参数7～8：x轴的结束位置
//
//
//        animationSet.addAnimation(getTranslateAnimation(2000));
//        animationSet.addAnimation(getAlphaAnimation());
//        animationSet.setFillAfter(true);
//        animationSet.setRepeatCount(1);
//
//
//        final AnimationSet animationSet1 = new AnimationSet(true);
//        animationSet1.addAnimation(getTranslateAnimation(2000));
//        animationSet1.addAnimation(getAlphaAnimation());
//        animationSet1.setFillAfter(true);
//        animationSet1.setRepeatCount(1);
//        animationSet1.setStartOffset(500);
//
//
//        final AnimationSet animationSet2 = new AnimationSet(true);
//        animationSet2.addAnimation(getTranslateAnimation(2000));
//        animationSet2.addAnimation(getAlphaAnimation());
//        animationSet2.setFillAfter(true);
//        animationSet2.setRepeatCount(1);
//        animationSet2.setStartOffset(800);
//
//        animationSet2.setAnimationListener(new Animation.AnimationListener() {
//            @Override
//            public void onAnimationStart(Animation animation) {
//
//            }
//
//            @Override
//            public void onAnimationEnd(Animation animation) {
//                LogUtil.info("onAnimationEnd", "onAnimationEnd");
//                NewLogin(animationThread);
//            }
//
//            @Override
//            public void onAnimationRepeat(Animation animation) {
//
//            }
//        });

    }

//    public TranslateAnimation getTranslateAnimation(long l) {
//        TranslateAnimation translateAnimation =
//                new TranslateAnimation(
//                        Animation.RELATIVE_TO_SELF, 0f,
//                        Animation.RELATIVE_TO_SELF, 0f,
//                        Animation.RELATIVE_TO_SELF, -1f,
//                        Animation.RELATIVE_TO_SELF, 10f);
//        translateAnimation.setDuration(l);
//        return translateAnimation;
//    }
//
//    public AlphaAnimation getAlphaAnimation() {
//        AlphaAnimation alphaAnimation = new AlphaAnimation(1, 0);
//        alphaAnimation.setDuration(1000);
//        return alphaAnimation;
//    }


    /**
     *
     * @param loginToken
     * @param username
     * @param usernameForLogin
     * @param passWord
     * @param mobilePhone
     * @param nickName
     * @param shopName
     * @param Welcome
     * @param sessionToken
     * @param mposKey
     * @param showMerName
     * @param email
     */
    @Override
    public void userLogin(String loginToken, String username, String usernameForLogin
            , String passWord, String mobilePhone, String nickName, String shopName
            , String Welcome, String sessionToken, String mposKey, String showMerName
            , String email, String agentFlag, String authFlag, String ismtNoticeCount
            , String merCode, String goodsSelectionUrl, String merPwd) {
        animationThread = true;
        Utilities.setGoodsSelectionUrl(this, goodsSelectionUrl);
        Utilities.setMerCode(this, merCode);
        new Handler().postDelayed(new Runnable(){
            public void run() {
                //execute the task
                NewLogin(animationThread);
            }
        }, 2000);

    }

    /**
     * 登录失败
     *
     * @param message
     */
    @Override
    public void userLoginError(String message, Map<String, String> respData) {
        Log.d(LOG_TAG, "登录失败");
        animationThread = false;
        new Handler().postDelayed(new Runnable(){
            public void run() {
                //execute the task
                NewLogin(animationThread);
            }
        }, 2000);
    }

    public void NewLogin(boolean status) {
        //Log.e("结束",System.currentTimeMillis()+"");
        Intent intent = null;

        if (status) {
            Intent sourceIntent = getIntent();
            intent = new Intent(this, MainActivity.class);
            Bundle bundle = sourceIntent.getExtras();
            if(bundle != null){
                intent.putExtras(sourceIntent.getExtras());
            }
            startActivity(intent);
            //Log.i("开始解压时间---", System.currentTimeMillis()+"");
            finish();
        } else {
            startActivity(new Intent(this, LoginActivity.class));
            finish();
        }

    }

    private long exitTime;// 退出时间

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN) {
            if ((System.currentTimeMillis() - exitTime) > 2000) {
                ToastUtils.showToast(this, getResources().getString(R.string.once_again));
                exitTime = System.currentTimeMillis();
            } else {
//                Intent intent = new Intent(Intent.ACTION_MAIN);
//                intent.addCategory(Intent.CATEGORY_HOME);
//                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
//                startActivity(intent);
//                android.os.Process.killProcess(android.os.Process.myPid());
                finish();
            }
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

  /*  @Override
    public void updateModel(String key, Object data) {
        if(AppService2.CHECK_UPDATE.equals(key)){
            if (pDialog != null) {
                pDialog.hide();
            }

        }
    }*/

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //pDialog.dismiss();
    }
}
